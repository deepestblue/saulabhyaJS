import { transliterate, } from "../src/saulabhya.js";

QUnit.config.maxDepth = -1;
QUnit.config.noglobals = true;

QUnit.module("Taml unit tests", () => {
    const data = {
        Taml: [
            "‡ÆÖ ‡ÆÜ ‡Æá ‡Æà ‡Æâ ‡Æä ‡Æé ‡Æè ‡Æê ‡Æí ‡Æì ‡Æî ‡ÆÉ",
            "‡Æï ‡Æï‡Ææ ‡Æï‡Æø ‡Æï‡ØÄ ‡Æï‡ØÅ ‡Æï‡ØÇ ‡Æï‡ØÜ ‡Æï‡Øá ‡Æï‡Øà ‡Æï‡Øä ‡Æï‡Øã ‡Æï‡Øå",
            "‡Æï‡Øç ‡Æô‡Øç ‡Æö‡Øç ‡Æû‡Øç ‡Æü‡Øç ‡Æ£‡Øç ‡Æ±‡Øç ‡Æ©‡Øç ‡Æ§‡Øç ‡Æ®‡Øç ‡Æ™‡Øç ‡ÆÆ‡Øç ‡ÆØ‡Øç ‡Æ∞‡Øç ‡Æ≤‡Øç ‡Æµ‡Øç ‡Æ¥‡Øç ‡Æ≥‡Øç",
            "‡Æï ‡Æô ‡Æö ‡Æû ‡Æü ‡Æ£ ‡Æ± ‡Æ© ‡Æ§ ‡Æ® ‡Æ™ ‡ÆÆ ‡ÆØ ‡Æ∞ ‡Æ≤ ‡Æµ ‡Æ¥ ‡Æ≥",
            "‡ÆÖ‡ÆÖ‡Æï‡Øç‡Æï‡Øç",
            "‡Æï‡Øç‡Æï",
            "‡Æ≤‡ÆÖ",
            "‡Æô‡Æû‡Øç‡Æü‡Øã",
            "‡ÆÖ‡Æä",
            "‡Æá‡Æì‡Æê‡ÆÖ‡Æì‡Æ©‡Æø‡Æ±‡ØÄ‡Æ©‡Øå‡Æ≥‡Æà‡ÆÖ",
            "‡Æï‡Øß",
            "‡Ø®‡Æô",
        ],
        Latn: [
            "a aÃÑ i iÃÑ u uÃÑ e eÃÑ ai o oÃÑ au kÃ±",
            "ka kaÃÑ ki kiÃÑ ku kuÃÑ ke keÃÑ kai ko koÃÑ kau",
            "k nÃá c nÃÉ tÃ£ nÃ£ tÃ± nÃ± t n p m y r lÃ± v rÃ£ lÃ£",
            "ka nÃáa ca nÃÉa tÃ£a nÃ£a tÃ±a nÃ±a ta na pa ma ya ra lÃ±a va rÃ£a lÃ£a",
            "aakk",
            "kka",
            "lÃ±aa",
            "nÃáanÃÉtÃ£oÃÑ",
            "auÃÑ",
            "ioÃÑaiaoÃÑnÃ±itÃ±iÃÑnÃ±aulÃ£aiÃÑa",
            "ka1",
            "2nÃáa",
        ],
    };
    QUnit.module("To Latin", () => {
        [...Array(data.Taml.length,).keys(),].forEach(i => {
            QUnit.test(data.Taml[i], t => {
                t.deepEqual(
                    transliterate("Taml", "Latn", data.Taml[i],),
                    data.Latn[i],);
            },);
        },);
    },);
    QUnit.module("From Latin", () => {
        [...Array(data.Latn.length,).keys(),].forEach(i => {
            QUnit.test(data.Latn[i], t => {
                t.deepEqual(
                    transliterate("Latn", "Taml", data.Latn[i],),
                    data.Taml[i],);
            },);
        },);
    },);
},);

QUnit.module("Telu unit tests", () => {
    const data = {
        Telu: [
            "‡∞Ö ‡∞Ü ‡∞á ‡∞à ‡∞â ‡∞ä ‡∞é ‡∞è ‡∞ê ‡∞í ‡∞ì ‡∞î",
            "‡∞ï ‡∞ï‡∞æ ‡∞ï‡∞ø ‡∞ï‡±Ä ‡∞ï‡±Å ‡∞ï‡±Ç ‡∞ï‡±Ü ‡∞ï‡±á ‡∞ï‡±à ‡∞ï‡±ä ‡∞ï‡±ã ‡∞ï‡±å",
            "‡∞ï‡±ç ‡∞ô‡±ç ‡∞ö‡±ç ‡∞û‡±ç ‡∞ü‡±ç ‡∞£‡±ç ‡∞±‡±ç ‡∞©‡±ç ‡∞§‡±ç ‡∞®‡±ç ‡∞™‡±ç ‡∞Æ‡±ç ‡∞Ø‡±ç ‡∞∞‡±ç ‡∞≤‡±ç ‡∞µ‡±ç ‡∞¥‡±ç ‡∞≥‡±ç",
            "‡∞ï ‡∞ô ‡∞ö ‡∞û ‡∞ü ‡∞£ ‡∞± ‡∞© ‡∞§ ‡∞® ‡∞™ ‡∞Æ ‡∞Ø ‡∞∞ ‡∞≤ ‡∞µ ‡∞¥ ‡∞≥",
        ],
        Latn: [
            "a aÃÑ i iÃÑ u uÃÑ e eÃÑ ai o oÃÑ au",
            "ka kaÃÑ ki kiÃÑ ku kuÃÑ ke keÃÑ kai ko koÃÑ kau",
            "k nÃá c nÃÉ tÃ£ nÃ£ tÃ± nÃ± t n p m y r lÃ± v rÃ£ lÃ£",
            "ka nÃáa ca nÃÉa tÃ£a nÃ£a tÃ±a nÃ±a ta na pa ma ya ra lÃ±a va rÃ£a lÃ£a",
        ],
    };
    QUnit.module("To Latin", () => {
        [...Array(data.Telu.length,).keys(),].forEach(i => {
            QUnit.test(data.Telu[i], t => {
                t.deepEqual(
                    transliterate("Telu", "Latn", data.Telu[i],),
                    data.Latn[i],);
            },);
        },);
    },);
    QUnit.module("From Latin", () => {
        [...Array(data.Latn.length,).keys(),].forEach(i => {
            QUnit.test(data.Latn[i], t => {
                t.deepEqual(
                    transliterate("Latn", "Telu", data.Latn[i],),
                    data.Telu[i],);
            },);
        },);
    },);
},);

QUnit.module("Knda unit tests", () => {
    const data = {
        Knda: [
            "‡≤Ö ‡≤Ü ‡≤á ‡≤à ‡≤â ‡≤ä ‡≤é ‡≤è ‡≤ê ‡≤í ‡≤ì ‡≤î",
            "‡≤ï ‡≤ï‡≤æ ‡≤ï‡≤ø ‡≤ï‡≥Ä ‡≤ï‡≥Å ‡≤ï‡≥Ç ‡≤ï‡≥Ü ‡≤ï‡≥á ‡≤ï‡≥à ‡≤ï‡≥ä ‡≤ï‡≥ã ‡≤ï‡≥å",
            "‡≤ï‡≥ç ‡≤ô‡≥ç ‡≤ö‡≥ç ‡≤û‡≥ç ‡≤ü‡≥ç ‡≤£‡≥ç ‡≤±‡≥ç ‡≤¥‡≥ç ‡≤§‡≥ç ‡≤®‡≥ç ‡≤™‡≥ç ‡≤Æ‡≥ç ‡≤Ø‡≥ç ‡≤∞‡≥ç ‡≤≤‡≥ç ‡≤µ‡≥ç ‡≥û‡≥ç ‡≤≥‡≥ç",
            "‡≤ï ‡≤ô ‡≤ö ‡≤û ‡≤ü ‡≤£ ‡≤± ‡≤¥ ‡≤§ ‡≤® ‡≤™ ‡≤Æ ‡≤Ø ‡≤∞ ‡≤≤ ‡≤µ ‡≥û ‡≤≥",
        ],
        Latn: [
            "a aÃÑ i iÃÑ u uÃÑ e eÃÑ ai o oÃÑ au",
            "ka kaÃÑ ki kiÃÑ ku kuÃÑ ke keÃÑ kai ko koÃÑ kau",
            "k nÃá c nÃÉ tÃ£ nÃ£ tÃ± nÃ± t n p m y r lÃ± v rÃ£ lÃ£",
            "ka nÃáa ca nÃÉa tÃ£a nÃ£a tÃ±a nÃ±a ta na pa ma ya ra lÃ±a va rÃ£a lÃ£a",
        ],
    };
    QUnit.module("To Latin", () => {
        [...Array(data.Knda.length,).keys(),].forEach(i => {
            QUnit.test(data.Knda[i], t => {
                t.deepEqual(
                    transliterate("Knda", "Latn", data.Knda[i],),
                    data.Latn[i],);
            },);
        },);
    },);
    QUnit.module("From Latin", () => {
        [...Array(data.Latn.length,).keys(),].forEach(i => {
            QUnit.test(data.Latn[i], t => {
                t.deepEqual(
                    transliterate("Latn", "Knda", data.Latn[i],),
                    data.Knda[i],);
            },);
        },);
    },);
},);

QUnit.module("Gran unit tests", () => {
    const data = {
        Gran: [
            "ëåÖ ëåÜ ëåá ëåà ëåâ ëåä ëåã ëç† ëåå ëç° ëåè ëåê ëåì ëåî ëåÖëåÇ ëåÖëåÅ ëåÖëåÉ",
            "ëåï ëåïëåæ ëåïëåø ëåïëçÄ ëåïëçÅ ëåïëçÇ ëåïëçÉ ëåïëçÑ ëåïëç¢ ëåïëç£ ëåïëçá ëåïëçà ëåïëçã ëåïëçå ëåïëåÇ ëåïëåÅ ëåïëåÉ",
            "ëåïëçç ëåñëçç ëåóëçç ëåòëçç ëåôëçç ëåöëçç ëåõëçç ëåúëçç ëåùëçç ëåûëçç ëåüëçç ëå†ëçç ëå°ëçç ëå¢ëçç ëå£ëçç ëå§ëçç ëå•ëçç ëå¶ëçç ëåßëçç ëå®ëçç ëå™ëçç ëå´ëçç ëå¨ëçç ëå≠ëçç ëåÆëçç ëåØëçç ëå∞ëçç ëå≤ëçç ëå≥ëçç ëåµëçç ëå∂ëçç ëå∑ëçç ëå∏ëçç ëåπëçç",
            "ëåï ëåñ ëåó ëåò ëåô ëåö ëåõ ëåú ëåù ëåû ëåü ëå† ëå° ëå¢ ëå£ ëå§ ëå• ëå¶ ëåß ëå® ëå™ ëå´ ëå¨ ëå≠ ëåÆ ëåØ ëå∞ ëå≤ ëå≥ ëåµ ëå∂ ëå∑ ëå∏ ëåπ",
            "ëåïëåæ ëåñëåæ ëåóëåæ ëåòëåæ ëåôëåæ ëåöëåæ ëåõëåæ ëåúëåæ ëåùëåæ ëåûëåæ ëåüëåæ ëå†ëåæ ëå°ëåæ ëå¢ëåæ ëå£ëåæ ëå§ëåæ ëå•ëåæ ëå¶ëåæ ëåßëåæ ëå®ëåæ ëå™ëåæ ëå´ëåæ ëå¨ëåæ ëå≠ëåæ ëåÆëåæ ëåØëåæ ëå∞ëåæ ëå≤ëåæ ëå≥ëåæ ëåµëåæ ëå∂ëåæ ëå∑ëåæ ëå∏ëåæ ëåπëåæ",
            "ëåÖëåÖëåïëççëåïëçç",
            "ëåïëççëåï",
            "ëå≤ëåÖ",
            "ëåôëåûëççëåüëçã",
            "ëåÖëåä",
            "ëåáëåìëåêëåÖëåìëå®ëåøëå§ëçÄëå®ëçåëå≥ëåàëåÖ",
            "ëåÖëåóëççëåÉ",
            "ëå¨ëççëåπëå£ëççëåπëå™ëåáëåöëççëåπëåâëåÖëåáëåÖëåì",
            "ëåÜëçù",
            "ëåìëçù",
            "ëåπëåæëçù",
            "ëå≤ëåïëççëå∑ëççëåÆëåøëçù",
            "ëå≤ëåïëççëå∑ëççëåÆëçÄëçù",
            "ëå∏ëçÅëåÆëåôëççëåóëå≤ëåæëåÅëçù",
        ],
        Latn: [
            "a aÃÑ i iÃÑ u uÃÑ rÃ• rÃ•ÃÑ lÃ• lÃ•ÃÑ eÃÑ ai oÃÑ au amÃá amÃê ahÃ£",
            "ka kaÃÑ ki kiÃÑ ku kuÃÑ krÃ• krÃ•ÃÑ klÃ• klÃ•ÃÑ keÃÑ kai koÃÑ kau kamÃá kamÃê kahÃ£",
            "k kh g gh nÃá c ch j jh nÃÉ tÃ£ tÃ£h dÃ£ dÃ£h nÃ£ t th d dh n p ph b bh m y r l lÃ£ v sÃÅ sÃ£ s h",
            "ka kha ga gha nÃáa ca cha ja jha nÃÉa tÃ£a tÃ£ha dÃ£a dÃ£ha nÃ£a ta tha da dha na pa pha ba bha ma ya ra la lÃ£a va sÃÅa sÃ£a sa ha",
            "kaÃÑ khaÃÑ gaÃÑ ghaÃÑ nÃáaÃÑ caÃÑ chaÃÑ jaÃÑ jhaÃÑ nÃÉaÃÑ tÃ£aÃÑ tÃ£haÃÑ dÃ£aÃÑ dÃ£haÃÑ nÃ£aÃÑ taÃÑ thaÃÑ daÃÑ dhaÃÑ naÃÑ paÃÑ phaÃÑ baÃÑ bhaÃÑ maÃÑ yaÃÑ raÃÑ laÃÑ lÃ£aÃÑ vaÃÑ sÃÅaÃÑ sÃ£aÃÑ saÃÑ haÃÑ",
            "aakk",
            "kka",
            "laa",
            "nÃáanÃÉtÃ£oÃÑ",
            "auÃÑ",
            "ioÃÑaiaoÃÑnitiÃÑnaulÃ£aiÃÑa",
            "aghÃ£",
            "b:hanÃ£hapa:ic:ha:ua:iaoÃÑ",
            "aÃÑ‚Ä¶",
            "oÃÑ‚Ä¶",
            "haÃÑ‚Ä¶",
            "laksÃ£mi‚Ä¶",
            "laksÃ£miÃÑ‚Ä¶",
            "sumanÃágalaÃÑmÃê‚Ä¶",
        ],
    };
    QUnit.module("To Latin", () => {
        [...Array(data.Gran.length,).keys(),].forEach(i => {
            QUnit.test(data.Gran[i], t => {
                t.deepEqual(
                    transliterate("Gran", "Latn", data.Gran[i],),
                    data.Latn[i],);
            },);
        },);
    },);
    QUnit.module("From Latin", () => {
        [...Array(data.Latn.length,).keys(),].forEach(i => {
            QUnit.test(data.Latn[i], t => {
                t.deepEqual(
                    transliterate("Latn", "Gran", data.Latn[i],),
                    data.Gran[i],);
            },);
        },);
    },);
},);

QUnit.module("Deva unit tests", () => {
    const data = {
        Deva: [
            "‡§Ö ‡§Ü ‡§á ‡§à ‡§â ‡§ä ‡§ã ‡•† ‡§å ‡•° ‡§è ‡§ê ‡§ì ‡§î ‡§Ö‡§Ç ‡§Ö‡§Å ‡§Ö‡§É",
            "‡§ï ‡§ï‡§æ ‡§ï‡§ø ‡§ï‡•Ä ‡§ï‡•Å ‡§ï‡•Ç ‡§ï‡•É ‡§ï‡•Ñ ‡§ï‡•¢ ‡§ï‡•£ ‡§ï‡•á ‡§ï‡•à ‡§ï‡•ã ‡§ï‡•å ‡§ï‡§Ç ‡§ï‡§Å ‡§ï‡§É",
            "‡§ï‡•ç ‡§ñ‡•ç ‡§ó‡•ç ‡§ò‡•ç ‡§ô‡•ç ‡§ö‡•ç ‡§õ‡•ç ‡§ú‡•ç ‡§ù‡•ç ‡§û‡•ç ‡§ü‡•ç ‡§†‡•ç ‡§°‡•ç ‡§¢‡•ç ‡§£‡•ç ‡§§‡•ç ‡§•‡•ç ‡§¶‡•ç ‡§ß‡•ç ‡§®‡•ç ‡§™‡•ç ‡§´‡•ç ‡§¨‡•ç ‡§≠‡•ç ‡§Æ‡•ç ‡§Ø‡•ç ‡§∞‡•ç ‡§≤‡•ç ‡§≥‡•ç ‡§µ‡•ç ‡§∂‡•ç ‡§∑‡•ç ‡§∏‡•ç ‡§π‡•ç",
            "‡§ï ‡§ñ ‡§ó ‡§ò ‡§ô ‡§ö ‡§õ ‡§ú ‡§ù ‡§û ‡§ü ‡§† ‡§° ‡§¢ ‡§£ ‡§§ ‡§• ‡§¶ ‡§ß ‡§® ‡§™ ‡§´ ‡§¨ ‡§≠ ‡§Æ ‡§Ø ‡§∞ ‡§≤ ‡§≥ ‡§µ ‡§∂ ‡§∑ ‡§∏ ‡§π",
            "‡§ï‡§æ ‡§ñ‡§æ ‡§ó‡§æ ‡§ò‡§æ ‡§ô‡§æ ‡§ö‡§æ ‡§õ‡§æ ‡§ú‡§æ ‡§ù‡§æ ‡§û‡§æ ‡§ü‡§æ ‡§†‡§æ ‡§°‡§æ ‡§¢‡§æ ‡§£‡§æ ‡§§‡§æ ‡§•‡§æ ‡§¶‡§æ ‡§ß‡§æ ‡§®‡§æ ‡§™‡§æ ‡§´‡§æ ‡§¨‡§æ ‡§≠‡§æ ‡§Æ‡§æ ‡§Ø‡§æ ‡§∞‡§æ ‡§≤‡§æ ‡§≥‡§æ ‡§µ‡§æ ‡§∂‡§æ ‡§∑‡§æ ‡§∏‡§æ ‡§π‡§æ",
            "‡§Ö‡§Ö‡§ï‡•ç‡§ï‡•ç",
            "‡§ï‡•ç‡§ï",
            "‡§≤‡§Ö",
            "‡§ô‡§û‡•ç‡§ü‡•ã",
            "‡§Ö‡§ä",
            "‡§á‡§ì‡§ê‡§Ö‡§ì‡§®‡§ø‡§§‡•Ä‡§®‡•å‡§≥‡§à‡§Ö",
            "‡§Ö‡§ó‡•ç‡§É",
            "‡§¨‡•ç‡§π‡§£‡•ç‡§π‡§™‡§á‡§ö‡•ç‡§π‡§â‡§Ö‡§á‡§Ö‡§ì",
            "‡§Ü‡•©",
            "‡§ì‡•©",
            "‡§π‡§æ‡•©",
            "‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡§ø‡•©",
            "‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä‡•©",
            "‡§∏‡•Å‡§Æ‡§ô‡•ç‡§ó‡§≤‡§æ‡§Å‡•©",
            "‡§¶‡•Å·≥µ‡§ñ‡§Æ‡•ç",
            "‡§µ·≥∂‡§™‡§ø‡§§‡§∞‡§É",
        ],
        Latn: [
            "a aÃÑ i iÃÑ u uÃÑ rÃ• rÃ•ÃÑ lÃ• lÃ•ÃÑ eÃÑ ai oÃÑ au amÃá amÃê ahÃ£",
            "ka kaÃÑ ki kiÃÑ ku kuÃÑ krÃ• krÃ•ÃÑ klÃ• klÃ•ÃÑ keÃÑ kai koÃÑ kau kamÃá kamÃê kahÃ£",
            "k kh g gh nÃá c ch j jh nÃÉ tÃ£ tÃ£h dÃ£ dÃ£h nÃ£ t th d dh n p ph b bh m y r l lÃ£ v sÃÅ sÃ£ s h",
            "ka kha ga gha nÃáa ca cha ja jha nÃÉa tÃ£a tÃ£ha dÃ£a dÃ£ha nÃ£a ta tha da dha na pa pha ba bha ma ya ra la lÃ£a va sÃÅa sÃ£a sa ha",
            "kaÃÑ khaÃÑ gaÃÑ ghaÃÑ nÃáaÃÑ caÃÑ chaÃÑ jaÃÑ jhaÃÑ nÃÉaÃÑ tÃ£aÃÑ tÃ£haÃÑ dÃ£aÃÑ dÃ£haÃÑ nÃ£aÃÑ taÃÑ thaÃÑ daÃÑ dhaÃÑ naÃÑ paÃÑ phaÃÑ baÃÑ bhaÃÑ maÃÑ yaÃÑ raÃÑ laÃÑ lÃ£aÃÑ vaÃÑ sÃÅaÃÑ sÃ£aÃÑ saÃÑ haÃÑ",
            "aakk",
            "kka",
            "laa",
            "nÃáanÃÉtÃ£oÃÑ",
            "auÃÑ",
            "ioÃÑaiaoÃÑnitiÃÑnaulÃ£aiÃÑa",
            "aghÃ£",
            "b:hanÃ£hapa:ic:ha:ua:iaoÃÑ",
            "aÃÑ‚Ä¶",
            "oÃÑ‚Ä¶",
            "haÃÑ‚Ä¶",
            "laksÃ£mi‚Ä¶",
            "laksÃ£miÃÑ‚Ä¶",
            "sumanÃágalaÃÑmÃê‚Ä¶",
            "duhÃ±kham",
            "vahÃÆpitarahÃ£",
        ],
    };
    QUnit.module("To Latin", () => {
        [...Array(data.Deva.length,).keys(),].forEach(i => {
            QUnit.test(data.Deva[i], t => {
                t.deepEqual(
                    transliterate("Deva", "Latn", data.Deva[i],),
                    data.Latn[i],);
            },);
        },);
    },);
    QUnit.module("From Latin", () => {
        [...Array(data.Latn.length,).keys(),].forEach(i => {
            QUnit.test(data.Latn[i], t => {
                t.deepEqual(
                    transliterate("Latn", "Deva", data.Latn[i],),
                    data.Deva[i],);
            },);
        },);
    },);
},);

QUnit.module("Numbers", () => {
    const data = {
        Taml: [
            "‡Ø¶",
            "‡Øß ‡Ø® ‡Ø© ‡Ø™ ‡Ø´ ‡Ø¨ ‡Ø≠ ‡ØÆ ‡ØØ",
            "‡Ø∞ ‡Ø±",
            "‡Ø±‡Ø∞‡Øß ‡Ø±‡Ø™‡Ø∞‡Øß ‡Ø®‡Ø±‡Ø∞‡Ø© ‡ØØ‡Ø±‡Ø≠‡Ø∞‡Øß ‡ØØ‡Ø±‡ØÆ‡Ø∞‡Ø´",
            "‡Ø≤",
            "‡Ø®‡Ø≤‡Ø∞‡Ø©",
            "‡Ø∞‡Ø≤",
            "‡Ø∞‡Øß‡Ø≤",
            "‡Ø®‡Ø∞‡Ø≤‡Ø©",
            "‡Ø≤‡Ø≤",
            "‡Ø∞‡Ø≤‡Ø≤",
            "‡Ø∞‡Øß‡Ø≤‡Ø≤‡Ø±‡Ø∞‡Øß‡Ø≤‡Ø±‡Ø∞‡Øß",
            "‡Ø®‡Ø∞‡Ø≤‡Ø≤‡Ø∞‡Ø©",
            "‡Ø®‡Ø∞‡Ø©‡Ø≤‡Ø≤‡Ø¨‡Ø±‡Ø´‡Ø∞‡Ø≤‡Ø´‡Ø±‡Ø¨‡Ø∞‡Ø¨",
            "‡Ø±‡Ø®‡Ø∞‡Ø©‡Ø≤‡Ø≤‡Ø≤‡Ø™‡Ø±‡Ø´‡Ø∞‡Ø¨‡Ø≤‡Ø≤‡Ø≠‡Ø±‡ØÆ‡Ø∞‡ØØ‡Ø≤‡Ø®‡Ø±‡Ø©‡Ø∞‡Ø™",
        ],
        Telu: [
            "‡±¶",
            "‡±ß ‡±® ‡±© ‡±™ ‡±´ ‡±¨ ‡±≠ ‡±Æ ‡±Ø",
            "‡±ß‡±¶ ‡±ß‡±¶‡±¶",
            "‡±ß‡±ß‡±ß ‡±ß‡±™‡±ß ‡±®‡±ß‡±© ‡±Ø‡±≠‡±ß ‡±Ø‡±Æ‡±´",
            "‡±ß‡±¶‡±¶‡±¶",
            "‡±®‡±¶‡±ß‡±©",
            "‡±ß‡±¶‡±¶‡±¶‡±¶",
            "‡±ß‡±ß‡±¶‡±¶‡±¶",
            "‡±®‡±¶‡±¶‡±¶‡±©",
            "‡±ß‡±¶‡±¶‡±¶‡±¶‡±¶‡±¶",
            "‡±ß‡±¶‡±¶‡±¶‡±¶‡±¶‡±¶‡±¶",
            "‡±ß‡±ß‡±ß‡±ß‡±ß‡±ß‡±ß‡±ß",
            "‡±®‡±¶‡±¶‡±¶‡±¶‡±¶‡±ß‡±©",
            "‡±®‡±©‡±¨‡±´‡±¶‡±´‡±¨‡±¨",
            "‡±ß‡±®‡±©‡±™‡±´‡±¨‡±≠‡±Æ‡±Ø‡±®‡±©‡±™",
        ],
        Deva: [
            "‡•¶",
            "‡•ß ‡•® ‡•© ‡•™ ‡•´ ‡•¨ ‡•≠ ‡•Æ ‡•Ø",
            "‡•ß‡•¶ ‡•ß‡•¶‡•¶",
            "‡•ß‡•ß‡•ß ‡•ß‡•™‡•ß ‡•®‡•ß‡•© ‡•Ø‡•≠‡•ß ‡•Ø‡•Æ‡•´",
            "‡•ß‡•¶‡•¶‡•¶",
            "‡•®‡•¶‡•ß‡•©",
            "‡•ß‡•¶‡•¶‡•¶‡•¶",
            "‡•ß‡•ß‡•¶‡•¶‡•¶",
            "‡•®‡•¶‡•¶‡•¶‡•©",
            "‡•ß‡•¶‡•¶‡•¶‡•¶‡•¶‡•¶",
            "‡•ß‡•¶‡•¶‡•¶‡•¶‡•¶‡•¶‡•¶",
            "‡•ß‡•ß‡•ß‡•ß‡•ß‡•ß‡•ß‡•ß",
            "‡•®‡•¶‡•¶‡•¶‡•¶‡•¶‡•ß‡•©",
            "‡•®‡•©‡•¨‡•´‡•¶‡•´‡•¨‡•¨",
            "‡•ß‡•®‡•©‡•™‡•´‡•¨‡•≠‡•Æ‡•Ø‡•®‡•©‡•™",
        ],
        Latn: [
            "0",
            "1 2 3 4 5 6 7 8 9",
            "10 100",
            "111 141 213 971 985",
            "1000",
            "2013",
            "10000",
            "11000",
            "20003",
            "1000000",
            "10000000",
            "11111111",
            "20000013",
            "23650566",
            "123456789234",
        ],
    };
    [...Array(data.Latn.length,).keys(),].forEach(i => {
        QUnit.test(`‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ${data.Taml[i]}`, t => {
            t.deepEqual(
                transliterate("Taml", "Latn", data.Taml[i],),
                data.Latn[i],);
        },);
        QUnit.test(`${data.Latn[i]} ‚Üí ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç`, t => {
            t.deepEqual(
                transliterate("Latn", "Taml", data.Latn[i],),
                data.Taml[i],);
        },);
        QUnit.test(`‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ${data.Telu[i]}`, t => {
            t.deepEqual(
                transliterate("Telu", "Latn", data.Telu[i],),
                data.Latn[i],);
        },);
        QUnit.test(`${data.Latn[i]} ‚Üí ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å`, t => {
            t.deepEqual(
                transliterate("Latn", "Telu", data.Latn[i],),
                data.Telu[i],);
        },);
        QUnit.test(`‡§¶‡•á‡§µ‡§®‡§æ‡§ó‡§∞‡•Ä ${data.Deva[i]}`, t => {
            t.deepEqual(
                transliterate("Deva", "Latn", data.Deva[i],),
                data.Latn[i],);
        },);
        QUnit.test(`${data.Latn[i]} ‚Üí ‡§¶‡•á‡§µ‡§®‡§æ‡§ó‡§∞‡•Ä`, t => {
            t.deepEqual(
                transliterate("Latn", "Deva", data.Latn[i],),
                data.Deva[i],);
        },);
    },);
},);

QUnit.module("Integration tests", () => {
    QUnit.module("Trivial transliteration", () => {
        QUnit.test("Transliterate from Taml to Taml", t => {
            const trivialTestText = "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Æø‡Æ≤‡Æø‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡Æé‡Æ≥‡Æø‡Æ§‡ØÅ.";
            t.deepEqual(
                transliterate("Taml", "Taml", trivialTestText,),
                trivialTestText,);
        },);
    },);
    QUnit.module("ta", () => {
        const textWithPunctuationAndSpacing = {
            Taml: `
‡ÆÆ‡Æ©‡Æø‡Æ§‡Æ™‡Øç ‡Æ™‡Æø‡Æ±‡Æµ‡Æø‡ÆØ‡Æø‡Æ©‡Æ∞‡Øç ‡Æö‡Æï‡Æ≤‡Æ∞‡ØÅ‡ÆÆ‡Øç ‡Æö‡ØÅ‡Æ§‡Æ®‡Øç‡Æ§‡Æø‡Æ∞‡ÆÆ‡Ææ‡Æï‡Æµ‡Øá ‡Æ™‡Æø‡Æ±‡Æï‡Øç‡Æï‡Æø‡Æ©‡Øç‡Æ¥‡Æ©‡Æ∞‡Øç. ‡ÆÖ‡Æµ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æ∞‡Æø‡ÆÆ‡Øà‡Æï‡Æ≥‡Æø‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æö‡ÆÆ‡ÆÆ‡Ææ‡Æ©‡Æµ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç. ‡ÆÖ‡Æµ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡Æ®‡Æø‡ÆØ‡Ææ‡ÆØ‡Æ§‡Øç‡Æ§‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Æ©‡Æö‡Ææ‡Æü‡Øç‡Æö‡Æø‡ÆØ‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æá‡ÆØ‡Æ±‡Øç‡Æ™‡Æ£‡Øç‡Æ™‡Ææ‡Æï‡Æ™‡Øç ‡Æ™‡ØÜ‡Æ±‡Øç‡Æ±‡Æµ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç. ‡ÆÖ‡Æµ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡Æí‡Æ∞‡ØÅ‡Æµ‡Æ∞‡ØÅ‡Æü‡Æ©‡Øä‡Æ∞‡ØÅ‡Æµ‡Æ∞‡Øç ‡Æö‡Æï‡Øã‡Æ§‡Æ∞ ‡Æâ‡Æ£‡Æ∞‡Øç‡Æµ‡ØÅ‡Æ™‡Øç ‡Æ™‡Ææ‡Æô‡Øç‡Æï‡Æø‡Æ≤‡Øç ‡Æ®‡Æü‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥‡Æ≤‡Øç ‡Æµ‡Øá‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç.
        `,
            Knda: `
‡≤Æ‡≤¥‡≤ø‡≤§‡≤™‡≥ç ‡≤™‡≤ø‡≤±‡≤µ‡≤ø‡≤Ø‡≤ø‡≤¥‡≤∞‡≥ç ‡≤ö‡≤ï‡≤≤‡≤∞‡≥Å‡≤Æ‡≥ç ‡≤ö‡≥Å‡≤§‡≤®‡≥ç‡≤§‡≤ø‡≤∞‡≤Æ‡≤æ‡≤ï‡≤µ‡≥á ‡≤™‡≤ø‡≤±‡≤ï‡≥ç‡≤ï‡≤ø‡≤¥‡≥ç‡≥û‡≤¥‡≤∞‡≥ç. ‡≤Ö‡≤µ‡≤∞‡≥ç‡≤ï‡≤≥‡≥ç ‡≤Æ‡≤§‡≤ø‡≤™‡≥ç‡≤™‡≤ø‡≤≤‡≥Å‡≤Æ‡≥ç ‡≤â‡≤∞‡≤ø‡≤Æ‡≥à‡≤ï‡≤≥‡≤ø‡≤≤‡≥Å‡≤Æ‡≥ç ‡≤ö‡≤Æ‡≤Æ‡≤æ‡≤¥‡≤µ‡≤∞‡≥ç‡≤ï‡≤≥‡≥ç. ‡≤Ö‡≤µ‡≤∞‡≥ç‡≤ï‡≤≥‡≥ç ‡≤®‡≤ø‡≤Ø‡≤æ‡≤Ø‡≤§‡≥ç‡≤§‡≥à‡≤Ø‡≥Å‡≤Æ‡≥ç ‡≤Æ‡≤¥‡≤ö‡≤æ‡≤ü‡≥ç‡≤ö‡≤ø‡≤Ø‡≥à‡≤Ø‡≥Å‡≤Æ‡≥ç ‡≤á‡≤Ø‡≤±‡≥ç‡≤™‡≤£‡≥ç‡≤™‡≤æ‡≤ï‡≤™‡≥ç ‡≤™‡≥Ü‡≤±‡≥ç‡≤±‡≤µ‡≤∞‡≥ç‡≤ï‡≤≥‡≥ç. ‡≤Ö‡≤µ‡≤∞‡≥ç‡≤ï‡≤≥‡≥ç ‡≤í‡≤∞‡≥Å‡≤µ‡≤∞‡≥Å‡≤ü‡≤¥‡≥ä‡≤∞‡≥Å‡≤µ‡≤∞‡≥ç ‡≤ö‡≤ï‡≥ã‡≤§‡≤∞ ‡≤â‡≤£‡≤∞‡≥ç‡≤µ‡≥Å‡≤™‡≥ç ‡≤™‡≤æ‡≤ô‡≥ç‡≤ï‡≤ø‡≤≤‡≥ç ‡≤®‡≤ü‡≤®‡≥ç‡≤§‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤≤‡≥ç ‡≤µ‡≥á‡≤£‡≥ç‡≤ü‡≥Å‡≤Æ‡≥ç.
        `,
            Telu: `
‡∞Æ‡∞©‡∞ø‡∞§‡∞™‡±ç ‡∞™‡∞ø‡∞±‡∞µ‡∞ø‡∞Ø‡∞ø‡∞©‡∞∞‡±ç ‡∞ö‡∞ï‡∞≤‡∞∞‡±Å‡∞Æ‡±ç ‡∞ö‡±Å‡∞§‡∞®‡±ç‡∞§‡∞ø‡∞∞‡∞Æ‡∞æ‡∞ï‡∞µ‡±á ‡∞™‡∞ø‡∞±‡∞ï‡±ç‡∞ï‡∞ø‡∞©‡±ç‡∞¥‡∞©‡∞∞‡±ç. ‡∞Ö‡∞µ‡∞∞‡±ç‡∞ï‡∞≥‡±ç ‡∞Æ‡∞§‡∞ø‡∞™‡±ç‡∞™‡∞ø‡∞≤‡±Å‡∞Æ‡±ç ‡∞â‡∞∞‡∞ø‡∞Æ‡±à‡∞ï‡∞≥‡∞ø‡∞≤‡±Å‡∞Æ‡±ç ‡∞ö‡∞Æ‡∞Æ‡∞æ‡∞©‡∞µ‡∞∞‡±ç‡∞ï‡∞≥‡±ç. ‡∞Ö‡∞µ‡∞∞‡±ç‡∞ï‡∞≥‡±ç ‡∞®‡∞ø‡∞Ø‡∞æ‡∞Ø‡∞§‡±ç‡∞§‡±à‡∞Ø‡±Å‡∞Æ‡±ç ‡∞Æ‡∞©‡∞ö‡∞æ‡∞ü‡±ç‡∞ö‡∞ø‡∞Ø‡±à‡∞Ø‡±Å‡∞Æ‡±ç ‡∞á‡∞Ø‡∞±‡±ç‡∞™‡∞£‡±ç‡∞™‡∞æ‡∞ï‡∞™‡±ç ‡∞™‡±Ü‡∞±‡±ç‡∞±‡∞µ‡∞∞‡±ç‡∞ï‡∞≥‡±ç. ‡∞Ö‡∞µ‡∞∞‡±ç‡∞ï‡∞≥‡±ç ‡∞í‡∞∞‡±Å‡∞µ‡∞∞‡±Å‡∞ü‡∞©‡±ä‡∞∞‡±Å‡∞µ‡∞∞‡±ç ‡∞ö‡∞ï‡±ã‡∞§‡∞∞ ‡∞â‡∞£‡∞∞‡±ç‡∞µ‡±Å‡∞™‡±ç ‡∞™‡∞æ‡∞ô‡±ç‡∞ï‡∞ø‡∞≤‡±ç ‡∞®‡∞ü‡∞®‡±ç‡∞§‡±Å‡∞ï‡±ä‡∞≥‡±ç‡∞≥‡∞≤‡±ç ‡∞µ‡±á‡∞£‡±ç‡∞ü‡±Å‡∞Æ‡±ç.
        `,
            Mlym: `
‡¥Æ‡¥©‡¥ø‡¥§‡¥™‡µç ‡¥™‡¥ø‡¥±‡¥µ‡¥ø‡¥Ø‡¥ø‡¥©‡¥∞‡µç ‡¥ö‡¥ï‡¥≤‡¥∞‡µÅ‡¥Æ‡µç ‡¥ö‡µÅ‡¥§‡¥®‡µç‡¥§‡¥ø‡¥∞‡¥Æ‡¥æ‡¥ï‡¥µ‡µá ‡¥™‡¥ø‡¥±‡¥ï‡µç‡¥ï‡¥ø‡¥©‡µç‡¥¥‡¥©‡¥∞‡µç. ‡¥Ö‡¥µ‡¥∞‡µç‡¥ï‡¥≥‡µç ‡¥Æ‡¥§‡¥ø‡¥™‡µç‡¥™‡¥ø‡¥≤‡µÅ‡¥Æ‡µç ‡¥â‡¥∞‡¥ø‡¥Æ‡µà‡¥ï‡¥≥‡¥ø‡¥≤‡µÅ‡¥Æ‡µç ‡¥ö‡¥Æ‡¥Æ‡¥æ‡¥©‡¥µ‡¥∞‡µç‡¥ï‡¥≥‡µç. ‡¥Ö‡¥µ‡¥∞‡µç‡¥ï‡¥≥‡µç ‡¥®‡¥ø‡¥Ø‡¥æ‡¥Ø‡¥§‡µç‡¥§‡µà‡¥Ø‡µÅ‡¥Æ‡µç ‡¥Æ‡¥©‡¥ö‡¥æ‡¥ü‡µç‡¥ö‡¥ø‡¥Ø‡µà‡¥Ø‡µÅ‡¥Æ‡µç ‡¥á‡¥Ø‡¥±‡µç‡¥™‡¥£‡µç‡¥™‡¥æ‡¥ï‡¥™‡µç ‡¥™‡µÜ‡¥±‡µç‡¥±‡¥µ‡¥∞‡µç‡¥ï‡¥≥‡µç. ‡¥Ö‡¥µ‡¥∞‡µç‡¥ï‡¥≥‡µç ‡¥í‡¥∞‡µÅ‡¥µ‡¥∞‡µÅ‡¥ü‡¥©‡µä‡¥∞‡µÅ‡¥µ‡¥∞‡µç ‡¥ö‡¥ï‡µã‡¥§‡¥∞ ‡¥â‡¥£‡¥∞‡µç‡¥µ‡µÅ‡¥™‡µç ‡¥™‡¥æ‡¥ô‡µç‡¥ï‡¥ø‡¥≤‡µç ‡¥®‡¥ü‡¥®‡µç‡¥§‡µÅ‡¥ï‡µä‡¥≥‡µç‡¥≥‡¥≤‡µç ‡¥µ‡µá‡¥£‡µç‡¥ü‡µÅ‡¥Æ‡µç.
        `,
            Latn: `
manÃ±itap pitÃ±aviyinÃ±ar cakalÃ±arum cutantiramaÃÑkaveÃÑ pitÃ±akkinÃ±rÃ£anÃ±ar. avarkalÃ£ matippilÃ±um urimaikalÃ£ilÃ±um camamaÃÑnÃ±avarkalÃ£. avarkalÃ£ niyaÃÑyattaiyum manÃ±acaÃÑtÃ£ciyaiyum iyatÃ±panÃ£paÃÑkap petÃ±tÃ±avarkalÃ£. avarkalÃ£ oruvarutÃ£anÃ±oruvar cakoÃÑtara unÃ£arvup paÃÑnÃákilÃ± natÃ£antukolÃ£lÃ£alÃ± veÃÑnÃ£tÃ£um.
        `, };
        QUnit.test("Taml to Latn: ta text with punctuation, spacing, etc.", t => {
            t.deepEqual(
                transliterate("Taml", "Latn", textWithPunctuationAndSpacing.Taml,),
                textWithPunctuationAndSpacing.Latn,);
        },);
        QUnit.test("Latn to Taml: ta text with punctuation, spacing, etc.", t => {
            t.deepEqual(
                transliterate("Latn", "Taml", textWithPunctuationAndSpacing.Latn,),
                textWithPunctuationAndSpacing.Taml,);
        },);
        QUnit.test("Taml to Knda: ta text with punctuation, spacing, etc.", t => {
            t.deepEqual(
                transliterate("Taml", "Knda", textWithPunctuationAndSpacing.Taml,),
                textWithPunctuationAndSpacing.Knda,);
        },);
        QUnit.test("Knda to Taml: ta text with punctuation, spacing, etc.", t => {
            t.deepEqual(
                transliterate("Knda", "Taml", textWithPunctuationAndSpacing.Knda,),
                textWithPunctuationAndSpacing.Taml,);
        },);
        QUnit.test("Taml to Telu: ta text with punctuation, spacing, etc.", t => {
            t.deepEqual(
                transliterate("Taml", "Telu", textWithPunctuationAndSpacing.Taml,),
                textWithPunctuationAndSpacing.Telu,);
        },);
        QUnit.test("Telu to Taml: ta text with punctuation, spacing, etc.", t => {
            t.deepEqual(
                transliterate("Telu", "Taml", textWithPunctuationAndSpacing.Telu,),
                textWithPunctuationAndSpacing.Taml,);
        },);
        QUnit.test("Taml to Mlym: ta text with punctuation, spacing, etc.", t => {
            t.deepEqual(
                transliterate("Taml", "Mlym", textWithPunctuationAndSpacing.Taml,),
                textWithPunctuationAndSpacing.Mlym,);
        },);
        QUnit.test("Mlym to Taml: ta text with punctuation, spacing, etc.", t => {
            t.deepEqual(
                transliterate("Mlym", "Taml", textWithPunctuationAndSpacing.Mlym,),
                textWithPunctuationAndSpacing.Taml,);
        },);
    },);

    QUnit.module("sa", () => {
        const textWithPunctuationAndSpacing = {
            Gran: `
ëå∏ëå∞ëççëåµëçá ëåÆëåæëå®ëåµëåæëåÉ ëåúëå®ëççëåÆëå®ëåæ ëå∏ëççëåµëå§ëå®ëççëå§ëççëå∞ëåæëåÉ ëåµëçàëåØëåïëççëå§ëåøëåïëåóëçåëå∞ëåµëçáëå£ ëåÖëåßëåøëåïëåæëå∞ëçáëå£ ëåö ëå§ëçÅëå≤ëççëåØëåæëåÉ ëåèëåµ ‡•§ ëå∏ëå∞ëççëåµëçáëå∑ëåæëåÇ ëåµëåøëåµëçáëåïëåÉ ëåÜëå§ëççëåÆëå∏ëåæëåïëççëå∑ëçÄ ëåö ëåµëå∞ëççëå§ëå§ëçá ‡•§ ëå∏ëå∞ëççëåµëçá ëå™ëå∞ëå∏ëççëå™ëå∞ëåÇ ëå≠ëççëå∞ëåæëå§ëçÉëå≠ëåæëåµëçáëå® ëåµëççëåØëåµëåπëå∞ëçáëåØëçÅëåÉ ‡•§

ëå∏ëå∞ëççëåµëçá ëåÆëåæëå®ëåµëåæëåÉ ëå∏ëççëåµëå§ëå®ëççëå§ëççëå∞ëåæëåÉ ëå∏ëåÆëçÅëå§ëççëå™ëå®ëççëå®ëåæëåÉ ëåµëå∞ëççëå§ëå®ëççëå§ëçá ëåÖëå™ëåø ëåö ëåóëçåëå∞ëåµëå¶ëçÉëå∂ëåæ ëåÖëåßëåøëåïëåæëå∞ëå¶ëçÉëå∂ëåæ ëåö ëå∏ëåÆëåæëå®ëåæëåÉ ëåèëåµ ëåµëå∞ëççëå§ëå®ëççëå§ëçá ‡•§ ëåèëå§ëçá ëå∏ëå∞ëççëåµëçá ëåöëçáëå§ëå®ëåæëå§ëå∞ëççëåïëå∂ëåïëççëå§ëåøëå≠ëççëåØëåæëåÇ ëå∏ëçÅëå∏ëåÆëççëå™ëå®ëççëå®ëåæëåÉ ëå∏ëå®ëççëå§ëåø ‡•§ ëåÖëå™ëåø ëåö ëå∏ëå∞ëççëåµëçáëå™ëåø ëå¨ëå®ëççëåßëçÅëå§ëççëåµëå≠ëåæëåµëå®ëåØëåæ ëå™ëå∞ëå∏ëççëå™ëå∞ëåÇ ëåµëççëåØëåµëåπëå∞ëå®ëççëå§ëçÅ ‡•§
        `,
            Deva: `
‡§∏‡§∞‡•ç‡§µ‡•á ‡§Æ‡§æ‡§®‡§µ‡§æ‡§É ‡§ú‡§®‡•ç‡§Æ‡§®‡§æ ‡§∏‡•ç‡§µ‡§§‡§®‡•ç‡§§‡•ç‡§∞‡§æ‡§É ‡§µ‡•à‡§Ø‡§ï‡•ç‡§§‡§ø‡§ï‡§ó‡•å‡§∞‡§µ‡•á‡§£ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡•á‡§£ ‡§ö ‡§§‡•Å‡§≤‡•ç‡§Ø‡§æ‡§É ‡§è‡§µ ‡•§ ‡§∏‡§∞‡•ç‡§µ‡•á‡§∑‡§æ‡§Ç ‡§µ‡§ø‡§µ‡•á‡§ï‡§É ‡§Ü‡§§‡•ç‡§Æ‡§∏‡§æ‡§ï‡•ç‡§∑‡•Ä ‡§ö ‡§µ‡§∞‡•ç‡§§‡§§‡•á ‡•§ ‡§∏‡§∞‡•ç‡§µ‡•á ‡§™‡§∞‡§∏‡•ç‡§™‡§∞‡§Ç ‡§≠‡•ç‡§∞‡§æ‡§§‡•É‡§≠‡§æ‡§µ‡•á‡§® ‡§µ‡•ç‡§Ø‡§µ‡§π‡§∞‡•á‡§Ø‡•Å‡§É ‡•§

‡§∏‡§∞‡•ç‡§µ‡•á ‡§Æ‡§æ‡§®‡§µ‡§æ‡§É ‡§∏‡•ç‡§µ‡§§‡§®‡•ç‡§§‡•ç‡§∞‡§æ‡§É ‡§∏‡§Æ‡•Å‡§§‡•ç‡§™‡§®‡•ç‡§®‡§æ‡§É ‡§µ‡§∞‡•ç‡§§‡§®‡•ç‡§§‡•á ‡§Ö‡§™‡§ø ‡§ö ‡§ó‡•å‡§∞‡§µ‡§¶‡•É‡§∂‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡§¶‡•É‡§∂‡§æ ‡§ö ‡§∏‡§Æ‡§æ‡§®‡§æ‡§É ‡§è‡§µ ‡§µ‡§∞‡•ç‡§§‡§®‡•ç‡§§‡•á ‡•§ ‡§è‡§§‡•á ‡§∏‡§∞‡•ç‡§µ‡•á ‡§ö‡•á‡§§‡§®‡§æ‡§§‡§∞‡•ç‡§ï‡§∂‡§ï‡•ç‡§§‡§ø‡§≠‡•ç‡§Ø‡§æ‡§Ç ‡§∏‡•Å‡§∏‡§Æ‡•ç‡§™‡§®‡•ç‡§®‡§æ‡§É ‡§∏‡§®‡•ç‡§§‡§ø ‡•§ ‡§Ö‡§™‡§ø ‡§ö ‡§∏‡§∞‡•ç‡§µ‡•á‡§™‡§ø ‡§¨‡§®‡•ç‡§ß‡•Å‡§§‡•ç‡§µ‡§≠‡§æ‡§µ‡§®‡§Ø‡§æ ‡§™‡§∞‡§∏‡•ç‡§™‡§∞‡§Ç ‡§µ‡•ç‡§Ø‡§µ‡§π‡§∞‡§®‡•ç‡§§‡•Å ‡•§
        `,
            Latn: `
sarveÃÑ maÃÑnavaÃÑhÃ£ janmanaÃÑ svatantraÃÑhÃ£ vaiyaktikagauraveÃÑnÃ£a adhikaÃÑreÃÑnÃ£a ca tulyaÃÑhÃ£ eÃÑva ‡•§ sarveÃÑsÃ£aÃÑmÃá viveÃÑkahÃ£ aÃÑtmasaÃÑksÃ£iÃÑ ca vartateÃÑ ‡•§ sarveÃÑ parasparamÃá bhraÃÑtrÃ•bhaÃÑveÃÑna vyavahareÃÑyuhÃ£ ‡•§

sarveÃÑ maÃÑnavaÃÑhÃ£ svatantraÃÑhÃ£ samutpannaÃÑhÃ£ vartanteÃÑ api ca gauravadrÃ•sÃÅaÃÑ adhikaÃÑradrÃ•sÃÅaÃÑ ca samaÃÑnaÃÑhÃ£ eÃÑva vartanteÃÑ ‡•§ eÃÑteÃÑ sarveÃÑ ceÃÑtanaÃÑtarkasÃÅaktibhyaÃÑmÃá susampannaÃÑhÃ£ santi ‡•§ api ca sarveÃÑpi bandhutvabhaÃÑvanayaÃÑ parasparamÃá vyavaharantu ‡•§
        `, };

        QUnit.test("Gran to Latn: sa text with punctuation, spacing, etc.", t => {
            t.deepEqual(
                transliterate("Gran", "Latn", textWithPunctuationAndSpacing.Gran,),
                textWithPunctuationAndSpacing.Latn,);
        },);
        QUnit.test("Latn to Gran: sa text with punctuation, spacing, etc.", t => {
            t.deepEqual(
                transliterate("Latn", "Gran", textWithPunctuationAndSpacing.Latn,),
                textWithPunctuationAndSpacing.Gran,);
        },);
        QUnit.test("Gran to Deva: sa text with punctuation, spacing, etc.", t => {
            t.deepEqual(
                transliterate("Gran", "Deva", textWithPunctuationAndSpacing.Gran,),
                textWithPunctuationAndSpacing.Deva,);
        },);
        QUnit.test("Deva to Gran: sa text with punctuation, spacing, etc.", t => {
            t.deepEqual(
                transliterate("Deva", "Gran", textWithPunctuationAndSpacing.Deva,),
                textWithPunctuationAndSpacing.Gran,);
        },);
    },);
},);

QUnit.module("Invalid inputs", () => {
    QUnit.test("Invalid Ta text in Taml", t => {
        const invalidTaTamlText = "‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Ææ‡Æï, ‡Æá‡Æµ‡Øç‡Æµ‡Æø‡Æ§‡Æø‡ÆÆ‡ØÅ‡Æ±‡Øà ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡ÆÆ‡Øç: ‡Æá‡Æ∞‡Ææ‡ÆÆ‡Æ®‡Ææ‡Æ§‡Æ™‡ØÅ‡Æ∞‡Æ§‡Øç‡Æ§‡Øà‡Æö‡Øç ‡Æö‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡Æµ‡Æ∞‡Øç ‡Æá‡Æ∞‡Ææ‡ÆÆ‡Æ®‡Ææ‡Æ§‡Æ™‡ØÅ‡Æ∞‡Æ§‡Øç‡Æ§‡ØÅ‡Æö‡Øç ‡Æö‡ØÄ‡Æ©‡Æø‡Æµ‡Ææ‡Æö ‡ÆÖ‡ÆØ‡Øç‡ÆØ‡Æô‡Øç‡Æï‡Ææ‡Æ∞‡Øç.";
        t.throws(
            () => transliterate("Taml", "Latn", invalidTaTamlText,),
            err => err instanceof Error &&
                /^Unknown Taml character: .\.$/v.test(err.message,),
        );
    },);
    QUnit.test("Invalid Ta text in Latn", t => {
        const invalidTaLatnText = "‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Ææ‡Æï, ‡Æá‡Æµ‡Øç‡Æµ‡Æø‡Æ§‡Æø‡ÆÆ‡ØÅ‡Æ±‡Øà ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡ÆÆ‡Øç: ‡Æá‡Æ∞‡Ææ‡ÆÆ‡Æ®‡Ææ‡Æ§‡Æ™‡ØÅ‡Æ∞‡Æ§‡Øç‡Æ§‡Øà‡Æö‡Øç ‡Æö‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡Æµ‡Æ∞‡Øç ‡Æá‡Æ∞‡Ææ‡ÆÆ‡Æ®‡Ææ‡Æ§‡Æ™‡ØÅ‡Æ∞‡Æ§‡Øç‡Æ§‡ØÅ‡Æö‡Øç ‡Æö‡ØÄ‡Æ©‡Æø‡Æµ‡Ææ‡Æö ‡ÆÖ‡ÆØ‡Øç‡ÆØ‡Æô‡Øç‡Æï‡Ææ‡Æ∞‡Øç.";
        t.throws(
            () => transliterate("Latn", "Taml", invalidTaLatnText,),
            err => err instanceof Error &&
                /^Unknown Taml character: .\.$/v.test(err.message,),
        );
    },);

    QUnit.test.each("Invalid Tamil number", [
        "‡Ø®‡Ø©",
        "‡Ø∞‡Ø∞",
        "‡Ø∞‡Ø±",
        "‡Øß‡Ø±",
        "‡Ø©‡Ø≤‡Ø®‡Ø∞‡Ø≠‡Ø≤‡Ø≤‡Ø±‡ØØ‡Ø∞‡ØØ",
    ], (t, invalidNumber,) => {
        t.throws(
            () => transliterate("Taml", "Latn", invalidNumber,),
            err => err instanceof Error &&
                new RegExp(`^Invalid number: ${invalidNumber}.$`, "v",).test(err.message,),
        );
    },);

    const unsupportedScriptName = "sinh";
    QUnit.test("Unsupported source script", t => {
        t.throws(
            () => transliterate(unsupportedScriptName, "Latn", "",),
            err => err instanceof Error &&
                new RegExp(`^Unsupported or invalid source script: ${unsupportedScriptName}.$`, "v",).test(err.message,),
        );
    },);
    QUnit.test("Unsupported target script", t => {
        t.throws(
            () => transliterate("Latn", unsupportedScriptName, "",),
            err => err instanceof Error &&
                new RegExp(`^Unsupported or invalid target script: ${unsupportedScriptName}.$`, "v",).test(err.message,),
        );
    },);
},);
